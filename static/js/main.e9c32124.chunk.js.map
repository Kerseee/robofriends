{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onsearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAoBeA,EAjBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE3B,OAGE,aAFA,CAEA,qBACA,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACE,6BAAKF,IACL,4BAAIC,aCmBGK,EA7BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OASZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAEtC,OAAQ,cAAC,EAAD,CAENT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAQnB,OACE,cAAC,WAAD,UACCM,KCVUI,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,YCoBEC,E,kDAtBb,WAAYN,GAAO,IAAD,8BAClB,cAAMA,IACCO,MAAQ,CACXC,UAAU,GAHI,E,qDAQlB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAGG,KAAKJ,MAAMC,SACL,yDAEFG,KAAKX,MAAMK,a,GAjBMQ,aCwDbC,E,kDAnDb,aAAe,IAAD,8BACZ,gBAoBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACXlB,OAAQ,GACR4B,YAAa,IAEfG,QAAQC,IAAI,eAPA,E,qDAUd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACvB,OAAQqC,OACxCN,QAAQC,IAAI,uB,oBAYd,WACE,MAA+BV,KAAKJ,MAA7BlB,EAAP,EAAOA,OAAQ4B,EAAf,EAAeA,YACTU,EAAiBtC,EAAOuC,QAAO,SAAAC,GACnC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASd,EAAYa,kBAGvD,OADAV,QAAQC,IAAI,UACPhC,EAAO2C,OAIR,sBAAK/C,UAAU,KAAf,UACE,6CACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQsC,WARnB,gD,GAlCKd,aCMHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9c32124.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\n\n// ({name, email, id}) distracting props\nconst Card = ({ name, email, id }) => {\n  // return 裡面只能放一個大 div\n  return (\n    // 下面這個空 tag 就是 fragment，在 react 16.2 加入的功能，可以讓 return 裡面的東西\n    // 不用被一個大 div 包住，等於是可以回傳多個 objects\n    <>\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default Card;\n\n","import React, {Fragment} from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n  // 加了以下這行，因為在 App.js 中 CardList 外面有 ErrorBoundary 包住，所以 react 會\n  // 處理這個 error。當我們用的是 production server 而不是 develop server 時，使用者會看到\n  // 我們用 ErrorBoundary 處理過後的資訊，而用 develop server 的話，則是可以直接在瀏覽器上看到噴錯\n  // if (true) {\n  //   throw new Error('Noooooo');\n  // }\n\n  const cardComponent = robots.map((user, i) => {\n    // 可以這樣直接 return 類 html 語法是因為 React 有 JSX 機制\n    return (<Card \n      key={robots[i].id} \n      id={robots[i].id} \n      name={robots[i].name} \n      email={robots[i].email}\n      />\n    )\n  })\n  \n  return (\n    <Fragment>\n    {cardComponent}\n    </Fragment>\n  );\n}\n\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n  super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  // Try catch blog for react\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oooops. There is error!</h1>\n    }\n    return this.props.children\n  }\n\n}\n\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n  constructor() {\n    super()\n    // 有 state 的 class component 稱為 smart component\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n    console.log('constructor')\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots: users}));\n    console.log('componentDidMount')\n  }\n\n  // 如果用下面這行，在這邊的 this 並不是 App，而是呼叫這個 function 的 SearchBox 裡面的 <input>，所以會噴錯\n  // onsearchChange(event){}\n  \n  // 所以要改成 arror function，這時的 onsearchChange 裡面的 this 就是 App 了\n  onsearchChange = (event) => {\n    this.setState({ searchfield: event.target.value})\n  }\n\n  // render 這個 function 在 App 物件的 state 有任何改動時都會被呼叫\n  render(){\n    const {robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    console.log('render')\n    if (!robots.length) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange={this.onsearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n            \n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';  // 用於各種裝置的 view\nimport ReactDOM from 'react-dom'; // 用於 web\nimport './index.css'; // index js 專用的 css\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \n// 因為 robots.js 不是 export default 而是 export 全部，因此 robots 外面要加大括號，\n// 如果 robots 還有其他 object 也可以在括號內用逗點分隔 import\n\nReactDOM.render(\n  // 可以在 component 的 tag 裡面放 properties\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}